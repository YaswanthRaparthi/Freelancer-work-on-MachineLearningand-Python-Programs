#Predicting Customer Churn

import pandas as pd
import warnings
warnings.filterwarnings("ignore")
from sklearn import preprocessing
from sklearn.metrics import confusion_matrix
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
import matplotlib.pyplot as plt
from matplotlib import rcParams

#Loading the Telco-Customer-Churn.csv dataset with pandas
datainput = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv') #https://www.kaggle.com/blastchar/telco-customer-churn
print("Given input data :\n",datainput)

datainput.drop(['customerID'], axis=1, inplace=True)
datainput.pop('TotalCharges')
datainput['OnlineBackup'].unique()

data = datainput['Churn'].value_counts(sort = True)
chroma = ["#BDFCC9","#FFDEAD"]
rcParams['figure.figsize'] = 9,9
explode = [0.2,0.2]
plt.pie(data, explode=explode, colors=chroma, autopct='%1.1f%%', shadow=True, startangle=180,)
plt.title('Percentage of Churn in the given Data')
plt.show()

#LabelEncoder()
from sklearn import preprocessing
label_encoder = preprocessing.LabelEncoder()
datainput['gender'] = label_encoder.fit_transform(datainput['gender'])
datainput['Partner'] = label_encoder.fit_transform(datainput['Partner'])
datainput['Dependents'] = label_encoder.fit_transform(datainput['Dependents'])
datainput['PhoneService'] = label_encoder.fit_transform(datainput['PhoneService'])
datainput['MultipleLines'] = label_encoder.fit_transform(datainput['MultipleLines'])
datainput['InternetService'] = label_encoder.fit_transform(datainput['InternetService'])
datainput['OnlineSecurity'] = label_encoder.fit_transform(datainput['OnlineSecurity'])
datainput['OnlineBackup'] = label_encoder.fit_transform(datainput['OnlineBackup'])
datainput['DeviceProtection'] = label_encoder.fit_transform(datainput['DeviceProtection'])
datainput['TechSupport'] = label_encoder.fit_transform(datainput['TechSupport'])
datainput['StreamingTV'] = label_encoder.fit_transform(datainput['StreamingTV'])
datainput['StreamingMovies'] = label_encoder.fit_transform(datainput['StreamingMovies'])
datainput['Contract'] = label_encoder.fit_transform(datainput['Contract'])
datainput['PaperlessBilling'] = label_encoder.fit_transform(datainput['PaperlessBilling'])
datainput['PaymentMethod'] = label_encoder.fit_transform(datainput['PaymentMethod'])
datainput['Churn'] = label_encoder.fit_transform(datainput['Churn'])
print("input data after label encoder :\n",datainput)

#separating features(X) and label(y)
datainput["Churn"] = datainput["Churn"].astype(int)
y = datainput["Churn"].values
X = datainput.drop(labels = ["Churn"],axis = 1)
print("\nseparated X and y :")
print("y -",y)
print("X -",X)

#train_test_split method
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

#LogisticRegression
classifier=LogisticRegression()
classifier.fit(X_train,y_train)
y_pred=classifier.predict(X_test)
print("\npredicted values :\n",y_pred)

#Accuracy
LR = metrics.accuracy_score(y_test, y_pred) * 100
print("\nThe accuracy score using the LR is -> ",LR)

#confusion matrix
cm=confusion_matrix(y_test,y_pred)
print("\nconfusion matrix : \n",cm)

#weights of all the variables
Z = pd.Series(classifier.coef_[0], index=X.columns.values)
print("\nweight of all the variables :")
print(Z.sort_values(ascending=False))

#output
Given input data :
       customerID  gender  SeniorCitizen  ... MonthlyCharges TotalCharges  Churn
0     7590-VHVEG  Female              0  ...          29.85        29.85     No
1     5575-GNVDE    Male              0  ...          56.95       1889.5     No
2     3668-QPYBK    Male              0  ...          53.85       108.15    Yes
3     7795-CFOCW    Male              0  ...          42.30      1840.75     No
4     9237-HQITU  Female              0  ...          70.70       151.65    Yes
...          ...     ...            ...  ...            ...          ...    ...
7038  6840-RESVB    Male              0  ...          84.80       1990.5     No
7039  2234-XADUH  Female              0  ...         103.20       7362.9     No
7040  4801-JZAZL  Female              0  ...          29.60       346.45     No
7041  8361-LTMKD    Male              1  ...          74.40        306.6    Yes
7042  3186-AJIEK    Male              0  ...         105.65       6844.5     No

[7043 rows x 21 columns]
input data after label encoder :
       gender  SeniorCitizen  Partner  ...  PaymentMethod  MonthlyCharges  Churn
0          0              0        1  ...              2           29.85      0
1          1              0        0  ...              3           56.95      0
2          1              0        0  ...              3           53.85      1
3          1              0        0  ...              0           42.30      0
4          0              0        0  ...              2           70.70      1
...      ...            ...      ...  ...            ...             ...    ...
7038       1              0        1  ...              3           84.80      0
7039       0              0        1  ...              1          103.20      0
7040       0              0        1  ...              2           29.60      0
7041       1              1        1  ...              3           74.40      1
7042       1              0        0  ...              0          105.65      0

[7043 rows x 19 columns]

separated X and y :
y - [0 0 1 ... 0 1 0]
X -       gender  SeniorCitizen  ...  PaymentMethod  MonthlyCharges
0          0              0  ...              2           29.85
1          1              0  ...              3           56.95
2          1              0  ...              3           53.85
3          1              0  ...              0           42.30
4          0              0  ...              2           70.70
...      ...            ...  ...            ...             ...
7038       1              0  ...              3           84.80
7039       0              0  ...              1          103.20
7040       0              0  ...              2           29.60
7041       1              1  ...              3           74.40
7042       1              0  ...              0          105.65

[7043 rows x 18 columns]

predicted values :
 [0 0 0 ... 0 0 0]

The accuracy score using the LR is ->  81.12136266855926

confusion matrix : 
 [[943 113]
 [153 200]]
 
weight of all the variables : 
PaperlessBilling    0.360279
SeniorCitizen       0.248203
InternetService     0.205173
MultipleLines       0.090970
PaymentMethod       0.060170
MonthlyCharges      0.028221
StreamingTV         0.018202
Partner             0.012447
StreamingMovies    -0.017819
gender             -0.033303
tenure             -0.034848
DeviceProtection   -0.078339
OnlineBackup       -0.145301
Dependents         -0.173241
OnlineSecurity     -0.237222
TechSupport        -0.251114
Contract           -0.713878
PhoneService       -0.964342
dtype: float64
