#Deep Learning with Keras in Python
#Keras is a library for deep learning in Python
#Deep learning refers to neural networks with multiple hidden layers that can learn increasingly abstract representations of the input data

#MNIST dataset
from __future__ import print_function
import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as Keras

x1, x2 = 28,28

(training_X, training_y), (testing_X, testing_y) = mnist.load_data()

if Keras.image_data_format() == 'channels_first':
    training_X = training_X.reshape(training_X.shape[0], 1, x1, x2)
    testing_X = testing_X.reshape(testing_X.shape[0], 1, x1, x2)
    input_shape = (1, x1, x2)
else:
    training_X = training_X.reshape(training_X.shape[0], x1, x2, 1)
    testing_X = testing_X.reshape(testing_X.shape[0], x1, x2, 1)
    input_shape = (x1, x2, 1)

training_X = training_X.astype('float32')
testing_X = testing_X.astype('float32')
training_X /= 255
testing_X /= 255
print('training_X size and shape:', training_X.shape)
print('training size',"\n",training_X.shape[0])
print('testing size',"\n",testing_X.shape[0])

training_y = keras.utils.to_categorical(training_y, 10)
testing_y = keras.utils.to_categorical(testing_y, 10)

cnn = Sequential()
cnn.add(Conv2D(32, kernel_size=(3, 3), activation='tanh',input_shape=input_shape))
cnn.add(Conv2D(64, (3, 3), activation='tanh'))
cnn.add(MaxPooling2D(pool_size=(2, 2)))
cnn.add(Dropout(0.25))
cnn.add(Flatten())
cnn.add(Dense(128, activation='tanh'))
cnn.add(Dropout(0.5))
cnn.add(Dense(10, activation='softmax'))

cnn.compile(loss=keras.losses.categorical_crossentropy,optimizer=keras.optimizers.Adadelta(), metrics=['acc'])
cnn.fit(training_X, training_y, batch_size=110,epochs=15,verbose=1,validation_data=(testing_X, testing_y))
result = cnn.evaluate(testing_X, testing_y, verbose=0)
print('loss value:', result[0])
print('accuracy value:', result[1])

#output
training_X size and shape: (60000, 28, 28, 1)
training size 
 60000
testing size 
 10000
Train on 60000 samples, validate on 10000 samples
Epoch 1/15
60000/60000 [==============================] - 13s 212us/step - loss: 0.2452 - acc: 0.9265 - val_loss: 0.0849 - val_acc: 0.9729
Epoch 2/15
60000/60000 [==============================] - 11s 180us/step - loss: 0.1051 - acc: 0.9676 - val_loss: 0.0523 - val_acc: 0.9815
Epoch 3/15
60000/60000 [==============================] - 11s 183us/step - loss: 0.0778 - acc: 0.9768 - val_loss: 0.0533 - val_acc: 0.9824
Epoch 4/15
60000/60000 [==============================] - 11s 180us/step - loss: 0.0663 - acc: 0.9793 - val_loss: 0.0466 - val_acc: 0.9836
Epoch 5/15
60000/60000 [==============================] - 10s 173us/step - loss: 0.0562 - acc: 0.9826 - val_loss: 0.0452 - val_acc: 0.9855
Epoch 6/15
60000/60000 [==============================] - 9s 157us/step - loss: 0.0526 - acc: 0.9838 - val_loss: 0.0434 - val_acc: 0.9858
Epoch 7/15
60000/60000 [==============================] - 9s 156us/step - loss: 0.0435 - acc: 0.9866 - val_loss: 0.0418 - val_acc: 0.9865
Epoch 8/15
60000/60000 [==============================] - 9s 155us/step - loss: 0.0408 - acc: 0.9869 - val_loss: 0.0377 - val_acc: 0.9870
Epoch 9/15
60000/60000 [==============================] - 10s 164us/step - loss: 0.0378 - acc: 0.9877 - val_loss: 0.0384 - val_acc: 0.9872
Epoch 10/15
60000/60000 [==============================] - 10s 162us/step - loss: 0.0354 - acc: 0.9886 - val_loss: 0.0371 - val_acc: 0.98762s - l
Epoch 11/15
60000/60000 [==============================] - 9s 155us/step - loss: 0.0336 - acc: 0.9893 - val_loss: 0.0387 - val_acc: 0.9876
Epoch 12/15
60000/60000 [==============================] - 9s 155us/step - loss: 0.0306 - acc: 0.9903 - val_loss: 0.0395 - val_acc: 0.9881
Epoch 13/15
60000/60000 [==============================] - 10s 162us/step - loss: 0.0283 - acc: 0.9915 - val_loss: 0.0368 - val_acc: 0.9883
Epoch 14/15
60000/60000 [==============================] - 10s 168us/step - loss: 0.0268 - acc: 0.9915 - val_loss: 0.0397 - val_acc: 0.9888
Epoch 15/15
60000/60000 [==============================] - 10s 163us/step - loss: 0.0250 - acc: 0.9917 - val_loss: 0.0354 - val_acc: 0.9888
loss value: 0.03538673621248454
accuracy value: 0.9887999892234802