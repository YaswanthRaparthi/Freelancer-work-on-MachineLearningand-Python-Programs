#Real-Time Edge Detection using OpenCV

#In this program, the popular canny edge detection algorithm is used to detect a wide range of edges in images.
#OpenCV has in-built function cv2.Canny() which takes the input image as first argument and its aperture size(min value and max value) as last two arguments.
#Canny Edge Detection is a popular edge detection algorithm.It was developed by John F. Canny in 1986. 
#It is a multi-stage algorithm and we will go through each stages.
#Canny edge detection is a technique to extract useful structural information from different vision objects and dramatically reduce the amount of data to be processed
#It has been widely applied in various computer vision systems.
#The general criteria for edge detection include:
#1.Detection of edge with low error rate, which means that the detection should accurately catch as many edges shown in the image as possible
#2.The edge point detected from the operator should accurately localize on the center of the edge.
#3.A given edge in the image should only be marked once, and where possible, image noise should not create false edges.

import cv2
import numpy as np

Edge_Detection = cv2.VideoCapture(0)
while (1):
    cv, size = Edge_Detection.read()
    scale = cv2.cvtColor(size, cv2.COLOR_BGR2HSV)

    bottom = np.array([40, 170, 60])
    top = np.array([300, 300, 225])

    disguise = cv2.inRange(scale, bottom, top)
    x = cv2.bitwise_and(size, size, mask=disguise)

    cv2.imshow('Real', size)
    boundary = cv2.Canny(size, 150, 250)
    cv2.imshow('Detecting Edges', boundary)

    c = cv2.waitKey(7) & 0xFF
    if c == 30:
        break

Edge_Detection.release()
cv2.destroyAllWindows()
