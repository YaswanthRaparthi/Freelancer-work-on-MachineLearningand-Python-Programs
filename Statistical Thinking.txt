#Statistical Thinking

import numpy as np
import pandas as pd
import warnings
warnings.filterwarnings("ignore")
import matplotlib.pyplot as plot
import seaborn as sns

datainput = pd.read_csv('iris.csv')
setosa_SepalLength = np.array([5.1,4.9,4.7,4.6,5,5.4,4.6,5,4.4,4.9,5.4,4.8,4.8,4.3,5.8,5.7,5.4,5.1,5.7,5.1,
5.4,5.1,4.6,5.1,4.8,5,5,5.2,5.2,4.7,4.8,5.4,5.2,5.5,4.9,5,5.5,4.9,4.4,5.1,5,4.5,4.4,5,5.1,4.8,5.1,4.6,5.3,5])

#histogram
sns.set()
plot.hist(setosa_SepalLength)
plot.show()

# Ploting histogram for setosa_SepalLength
X = plot.hist(setosa_SepalLength)
# Label axes
plot.xlabel('Sepal_length')
plot.ylabel('values')
plot.show()

# Compute number of data points: x
x = len(setosa_SepalLength)
# Number of bins is the square root of number of data points: y
y = np.sqrt(x)
# Convert number of bins to integer: y
y = int(y)
z = plot.hist(setosa_SepalLength, bins=y)
z = plot.xlabel('Sepal_length')
z = plot.ylabel('values')
plot.show()

# Creating bee swarm plot with Seaborn's default settings
sns.swarmplot(x='Species', y='SepalLengthCm', data=datainput)
plot.xlabel('Species')
plot.ylabel('Sepal_length')
plot.show()

#Empirical cumulative distribution functions
def ECDF(datainput):
    """Compute ECDF for a one-dimensional array of measurements."""
    # Number of data points: i
    i = len(datainput)
    # x-data for the ECDF: m
    m = np.sort(datainput)
    # y-data for the ECDF: n
    n = np.arange(1, i + 1) / i
    return m, n
# Compute ECDF for versicolor data: m,n
m, n = ECDF(setosa_SepalLength)
plot.plot(m, n, marker='.', linestyle='none')
plot.xlabel('Sepal_length')
plot.ylabel('Empirical cumulative distribution functions')
plot.show()
