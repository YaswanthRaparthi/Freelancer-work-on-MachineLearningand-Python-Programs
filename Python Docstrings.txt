#Python Docstrings

def Docstrings():
	"""Freelancer work from home"""
	return None
print ("by applying __doc__:")
print (Docstrings.__doc__ )
print ("by applying help:\n")
help(Docstrings)

#output
by applying __doc__:
Freelancer work from home
by applying help:

Help on function Docstrings in module __main__:

Docstrings()
    Freelancer work from home
------------------------------------------------------------------------------------------------------------------------------------------------------

def Docstrings(a, b):
	"""Actions speak louder than words."""
	return a**b
print (Docstrings.__doc__)

#output
Actions speak louder than words.
--------------------------------------------------------------------------------------------------------------------------------------------------------

def Docstrings(x):
    """
A golden key opens any door'
is the opinion that sufficient money,
or the promise of it,
will allow the possessor of it to do anything they wish.
"""
    return x

print (Docstrings.__doc__)

#output
A golden key opens any door'
is the opinion that sufficient money,
or the promise of it,
will allow the possessor of it to do anything they wish.
----------------------------------------------------------------------------------------------------------------------------------------------------------
class Docstrings:
    """
    This is a class for mathematical operations on complex numbers.

    DataType:
        Character (char): The abbreviation char is used as a reserved keyword in some programming languages.
        Double (double): The double is a fundamental data type built into the compiler and used to define numeric variables holding numbers with decimal points
    """

    def __init__(self, Character, Double):
        """
        Docstrings class.

        Types:
        Character (char): The abbreviation char is used as a reserved keyword in some programming languages.
        Double (double): The double is a fundamental data type built into the compiler and used to define numeric variables holding numbers with decimal points
        """

    def mul(self, x):
        """
        The function which multiplies Docstrings.

        Values:
            x (Docstrings): The Docstrings will be multiplied.

        Return:
            Docstrings: The Docstring which has the product.
        """

        Char = self.Character * num.Character
        Dou = self.Double * num.Double

        return Docstrings(Char, Dou)

help(Docstrings)
help(Docstrings.mul)

#output
Help on class Docstrings in module __main__:

class Docstrings(builtins.object)
 |  This is a class for mathematical operations on complex numbers.
 |  
 |  DataType:
 |      Character (char): The abbreviation char is used as a reserved keyword in some programming languages.
 |      Double (double): The double is a fundamental data type built into the compiler and used to define numeric variables holding numbers with decimal points
 |  
 |  Methods defined here:
 |  
 |  __init__(self, Character, Double)
 |      Docstrings class.
 |      
 |      Types:
 |      Character (char): The abbreviation char is used as a reserved keyword in some programming languages.
 |      Double (double): The double is a fundamental data type built into the compiler and used to define numeric variables holding numbers with decimal points
 |  
 |  mul(self, x)
 |      The function which multiplies Docstrings.
 |      
 |      Values:
 |          x (Docstrings): The Docstrings will be multiplied.
 |      
 |      Return:
 |          Docstrings: The Docstring which has the product.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)

Help on function mul in module __main__:

mul(self, x)
    The function which multiplies Docstrings.
    
    Values:
        x (Docstrings): The Docstrings will be multiplied.
    
    Return:
        Docstrings: The Docstring which has the product.
